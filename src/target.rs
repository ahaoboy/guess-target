pub use strum::IntoEnumIterator;
use strum_macros::EnumIter;

#[cfg_attr(feature = "wasm", wasm_bindgen::prelude::wasm_bindgen)]
#[derive(EnumIter, Debug, PartialEq, Hash, Eq, Clone, Copy)]
pub enum Os {
    Darwin,
    Linux,
    Windows,
    Freebsd,
    Illumos,
    Netbsd,
    Ios,
    Android,
    Fuchsia,
    None,
    Uefi,
    Androideabi,
    Eabi,
    Eabihf,
    Cuda,
    Solaris,
    Emscripten,
    Unknown,
    Wasip1,
    Threads,
    Wasip2,
    Redox,
}
impl Os {
    pub fn to_str(&self) -> &'static str {
        match self {
            Os::Darwin => "darwin",
            Os::Linux => "linux",
            Os::Windows => "windows",
            Os::Freebsd => "freebsd",
            Os::Illumos => "illumos",
            Os::Netbsd => "netbsd",
            Os::Ios => "ios",
            Os::Android => "android",
            Os::Fuchsia => "fuchsia",
            Os::None => "none",
            Os::Uefi => "uefi",
            Os::Androideabi => "androideabi",
            Os::Eabi => "eabi",
            Os::Eabihf => "eabihf",
            Os::Cuda => "cuda",
            Os::Solaris => "solaris",
            Os::Emscripten => "emscripten",
            Os::Unknown => "unknown",
            Os::Wasip1 => "wasip1",
            Os::Threads => "threads",
            Os::Wasip2 => "wasip2",
            Os::Redox => "redox",
        }
    }
}
impl std::fmt::Display for Os {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(self.to_str())
    }
}
impl std::str::FromStr for Os {
    type Err = &'static str;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "darwin" => Ok(Os::Darwin),
            "linux" => Ok(Os::Linux),
            "windows" => Ok(Os::Windows),
            "freebsd" => Ok(Os::Freebsd),
            "illumos" => Ok(Os::Illumos),
            "netbsd" => Ok(Os::Netbsd),
            "ios" => Ok(Os::Ios),
            "android" => Ok(Os::Android),
            "fuchsia" => Ok(Os::Fuchsia),
            "none" => Ok(Os::None),
            "uefi" => Ok(Os::Uefi),
            "androideabi" => Ok(Os::Androideabi),
            "eabi" => Ok(Os::Eabi),
            "eabihf" => Ok(Os::Eabihf),
            "cuda" => Ok(Os::Cuda),
            "solaris" => Ok(Os::Solaris),
            "emscripten" => Ok(Os::Emscripten),
            "unknown" => Ok(Os::Unknown),
            "wasip1" => Ok(Os::Wasip1),
            "threads" => Ok(Os::Threads),
            "wasip2" => Ok(Os::Wasip2),
            "redox" => Ok(Os::Redox),
            _ => Err("Unknown Os"),
        }
    }
}
#[cfg_attr(feature = "wasm", wasm_bindgen::prelude::wasm_bindgen)]
#[derive(EnumIter, Debug, PartialEq, Hash, Eq, Clone, Copy)]
pub enum Arch {
    Aarch64,
    I686,
    X86_64,
    Arm,
    Armv7,
    Loongarch64,
    Powerpc,
    Powerpc64,
    Powerpc64le,
    Riscv64gc,
    S390x,
    Arm64ec,
    Armebv7r,
    Armv5te,
    Armv7a,
    Armv7r,
    I586,
    Nvptx64,
    Riscv32i,
    Riscv32im,
    Riscv32imac,
    Riscv32imafc,
    Riscv32imc,
    Riscv64imac,
    Sparc64,
    Sparcv9,
    Thumbv6m,
    Thumbv7em,
    Thumbv7m,
    Thumbv7neon,
    Thumbv8mBase,
    Thumbv8mMain,
    Wasm32,
    Wasm32v1,
}
impl Arch {
    pub fn to_str(&self) -> &'static str {
        match self {
            Arch::Aarch64 => "aarch64",
            Arch::I686 => "i686",
            Arch::X86_64 => "x86_64",
            Arch::Arm => "arm",
            Arch::Armv7 => "armv7",
            Arch::Loongarch64 => "loongarch64",
            Arch::Powerpc => "powerpc",
            Arch::Powerpc64 => "powerpc64",
            Arch::Powerpc64le => "powerpc64le",
            Arch::Riscv64gc => "riscv64gc",
            Arch::S390x => "s390x",
            Arch::Arm64ec => "arm64ec",
            Arch::Armebv7r => "armebv7r",
            Arch::Armv5te => "armv5te",
            Arch::Armv7a => "armv7a",
            Arch::Armv7r => "armv7r",
            Arch::I586 => "i586",
            Arch::Nvptx64 => "nvptx64",
            Arch::Riscv32i => "riscv32i",
            Arch::Riscv32im => "riscv32im",
            Arch::Riscv32imac => "riscv32imac",
            Arch::Riscv32imafc => "riscv32imafc",
            Arch::Riscv32imc => "riscv32imc",
            Arch::Riscv64imac => "riscv64imac",
            Arch::Sparc64 => "sparc64",
            Arch::Sparcv9 => "sparcv9",
            Arch::Thumbv6m => "thumbv6m",
            Arch::Thumbv7em => "thumbv7em",
            Arch::Thumbv7m => "thumbv7m",
            Arch::Thumbv7neon => "thumbv7neon",
            Arch::Thumbv8mBase => "thumbv8m.base",
            Arch::Thumbv8mMain => "thumbv8m.main",
            Arch::Wasm32 => "wasm32",
            Arch::Wasm32v1 => "wasm32v1",
        }
    }
}
impl std::fmt::Display for Arch {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(self.to_str())
    }
}
impl std::str::FromStr for Arch {
    type Err = &'static str;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "aarch64" => Ok(Arch::Aarch64),
            "i686" => Ok(Arch::I686),
            "x86_64" => Ok(Arch::X86_64),
            "arm" => Ok(Arch::Arm),
            "armv7" => Ok(Arch::Armv7),
            "loongarch64" => Ok(Arch::Loongarch64),
            "powerpc" => Ok(Arch::Powerpc),
            "powerpc64" => Ok(Arch::Powerpc64),
            "powerpc64le" => Ok(Arch::Powerpc64le),
            "riscv64gc" => Ok(Arch::Riscv64gc),
            "s390x" => Ok(Arch::S390x),
            "arm64ec" => Ok(Arch::Arm64ec),
            "armebv7r" => Ok(Arch::Armebv7r),
            "armv5te" => Ok(Arch::Armv5te),
            "armv7a" => Ok(Arch::Armv7a),
            "armv7r" => Ok(Arch::Armv7r),
            "i586" => Ok(Arch::I586),
            "nvptx64" => Ok(Arch::Nvptx64),
            "riscv32i" => Ok(Arch::Riscv32i),
            "riscv32im" => Ok(Arch::Riscv32im),
            "riscv32imac" => Ok(Arch::Riscv32imac),
            "riscv32imafc" => Ok(Arch::Riscv32imafc),
            "riscv32imc" => Ok(Arch::Riscv32imc),
            "riscv64imac" => Ok(Arch::Riscv64imac),
            "sparc64" => Ok(Arch::Sparc64),
            "sparcv9" => Ok(Arch::Sparcv9),
            "thumbv6m" => Ok(Arch::Thumbv6m),
            "thumbv7em" => Ok(Arch::Thumbv7em),
            "thumbv7m" => Ok(Arch::Thumbv7m),
            "thumbv7neon" => Ok(Arch::Thumbv7neon),
            "thumbv8m.base" => Ok(Arch::Thumbv8mBase),
            "thumbv8m.main" => Ok(Arch::Thumbv8mMain),
            "wasm32" => Ok(Arch::Wasm32),
            "wasm32v1" => Ok(Arch::Wasm32v1),
            _ => Err("Unknown Arch"),
        }
    }
}
#[cfg_attr(feature = "wasm", wasm_bindgen::prelude::wasm_bindgen)]
#[derive(EnumIter, Debug, PartialEq, Hash, Eq, Clone, Copy)]
pub enum Vendor {
    Apple,
    Unknown,
    Pc,
    Linux,
    None,
    Nvidia,
    Sun,
    Wasip1,
    Wasip2,
    Fortanix,
}
impl Vendor {
    pub fn to_str(&self) -> &'static str {
        match self {
            Vendor::Apple => "apple",
            Vendor::Unknown => "unknown",
            Vendor::Pc => "pc",
            Vendor::Linux => "linux",
            Vendor::None => "none",
            Vendor::Nvidia => "nvidia",
            Vendor::Sun => "sun",
            Vendor::Wasip1 => "wasip1",
            Vendor::Wasip2 => "wasip2",
            Vendor::Fortanix => "fortanix",
        }
    }
}
impl std::fmt::Display for Vendor {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(self.to_str())
    }
}
impl std::str::FromStr for Vendor {
    type Err = &'static str;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "apple" => Ok(Vendor::Apple),
            "unknown" => Ok(Vendor::Unknown),
            "pc" => Ok(Vendor::Pc),
            "linux" => Ok(Vendor::Linux),
            "none" => Ok(Vendor::None),
            "nvidia" => Ok(Vendor::Nvidia),
            "sun" => Ok(Vendor::Sun),
            "wasip1" => Ok(Vendor::Wasip1),
            "wasip2" => Ok(Vendor::Wasip2),
            "fortanix" => Ok(Vendor::Fortanix),
            _ => Err("Unknown Vendor"),
        }
    }
}
#[cfg_attr(feature = "wasm", wasm_bindgen::prelude::wasm_bindgen)]
#[derive(EnumIter, Debug, PartialEq, Hash, Eq, Clone, Copy)]
pub enum Abi {
    Gnu,
    Msvc,
    Musl,
    Gnueabi,
    Gnueabihf,
    Macabi,
    Sim,
    Gnullvm,
    Ohos,
    Softfloat,
    Musleabi,
    Musleabihf,
    Elf,
    Sgx,
    Gnux32,
}
impl Abi {
    pub fn to_str(&self) -> &'static str {
        match self {
            Abi::Gnu => "gnu",
            Abi::Msvc => "msvc",
            Abi::Musl => "musl",
            Abi::Gnueabi => "gnueabi",
            Abi::Gnueabihf => "gnueabihf",
            Abi::Macabi => "macabi",
            Abi::Sim => "sim",
            Abi::Gnullvm => "gnullvm",
            Abi::Ohos => "ohos",
            Abi::Softfloat => "softfloat",
            Abi::Musleabi => "musleabi",
            Abi::Musleabihf => "musleabihf",
            Abi::Elf => "elf",
            Abi::Sgx => "sgx",
            Abi::Gnux32 => "gnux32",
        }
    }
}
impl std::fmt::Display for Abi {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(self.to_str())
    }
}
impl std::str::FromStr for Abi {
    type Err = &'static str;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "gnu" => Ok(Abi::Gnu),
            "msvc" => Ok(Abi::Msvc),
            "musl" => Ok(Abi::Musl),
            "gnueabi" => Ok(Abi::Gnueabi),
            "gnueabihf" => Ok(Abi::Gnueabihf),
            "macabi" => Ok(Abi::Macabi),
            "sim" => Ok(Abi::Sim),
            "gnullvm" => Ok(Abi::Gnullvm),
            "ohos" => Ok(Abi::Ohos),
            "softfloat" => Ok(Abi::Softfloat),
            "musleabi" => Ok(Abi::Musleabi),
            "musleabihf" => Ok(Abi::Musleabihf),
            "elf" => Ok(Abi::Elf),
            "sgx" => Ok(Abi::Sgx),
            "gnux32" => Ok(Abi::Gnux32),
            _ => Err("Unknown Abi"),
        }
    }
}
#[cfg_attr(feature = "wasm", wasm_bindgen::prelude::wasm_bindgen)]
#[derive(EnumIter, Debug, PartialEq, Hash, Eq, Clone, Copy)]
pub enum Target {
    Aarch64AppleDarwin,
    Aarch64UnknownLinuxGnu,
    I686PcWindowsGnu,
    I686PcWindowsMsvc,
    I686UnknownLinuxGnu,
    X86_64AppleDarwin,
    X86_64PcWindowsGnu,
    X86_64PcWindowsMsvc,
    X86_64UnknownLinuxGnu,
    Aarch64PcWindowsMsvc,
    Aarch64UnknownLinuxMusl,
    ArmUnknownLinuxGnueabi,
    ArmUnknownLinuxGnueabihf,
    Armv7UnknownLinuxGnueabihf,
    Loongarch64UnknownLinuxGnu,
    Loongarch64UnknownLinuxMusl,
    PowerpcUnknownLinuxGnu,
    Powerpc64UnknownLinuxGnu,
    Powerpc64leUnknownLinuxGnu,
    Powerpc64leUnknownLinuxMusl,
    Riscv64gcUnknownLinuxGnu,
    Riscv64gcUnknownLinuxMusl,
    S390xUnknownLinuxGnu,
    X86_64UnknownFreebsd,
    X86_64UnknownIllumos,
    X86_64UnknownLinuxMusl,
    X86_64UnknownNetbsd,
    Aarch64AppleIos,
    Aarch64AppleIosMacabi,
    Aarch64AppleIosSim,
    Aarch64LinuxAndroid,
    Aarch64PcWindowsGnullvm,
    Aarch64UnknownFuchsia,
    Aarch64UnknownLinuxOhos,
    Aarch64UnknownNone,
    Aarch64UnknownNoneSoftfloat,
    Aarch64UnknownUefi,
    ArmLinuxAndroideabi,
    ArmUnknownLinuxMusleabi,
    ArmUnknownLinuxMusleabihf,
    Arm64ecPcWindowsMsvc,
    Armebv7rNoneEabi,
    Armebv7rNoneEabihf,
    Armv5teUnknownLinuxGnueabi,
    Armv5teUnknownLinuxMusleabi,
    Armv7LinuxAndroideabi,
    Armv7UnknownLinuxGnueabi,
    Armv7UnknownLinuxMusleabi,
    Armv7UnknownLinuxMusleabihf,
    Armv7UnknownLinuxOhos,
    Armv7aNoneEabi,
    Armv7rNoneEabi,
    Armv7rNoneEabihf,
    I586PcWindowsMsvc,
    I586UnknownLinuxGnu,
    I586UnknownLinuxMusl,
    I686LinuxAndroid,
    I686PcWindowsGnullvm,
    I686UnknownFreebsd,
    I686UnknownLinuxMusl,
    I686UnknownUefi,
    Loongarch64UnknownNone,
    Loongarch64UnknownNoneSoftfloat,
    Nvptx64NvidiaCuda,
    Riscv32iUnknownNoneElf,
    Riscv32imUnknownNoneElf,
    Riscv32imacUnknownNoneElf,
    Riscv32imafcUnknownNoneElf,
    Riscv32imcUnknownNoneElf,
    Riscv64gcUnknownNoneElf,
    Riscv64imacUnknownNoneElf,
    Sparc64UnknownLinuxGnu,
    Sparcv9SunSolaris,
    Thumbv6mNoneEabi,
    Thumbv7emNoneEabi,
    Thumbv7emNoneEabihf,
    Thumbv7mNoneEabi,
    Thumbv7neonLinuxAndroideabi,
    Thumbv7neonUnknownLinuxGnueabihf,
    Thumbv8mBaseNoneEabi,
    Thumbv8mMainNoneEabi,
    Thumbv8mMainNoneEabihf,
    Wasm32UnknownEmscripten,
    Wasm32UnknownUnknown,
    Wasm32Wasip1,
    Wasm32Wasip1Threads,
    Wasm32Wasip2,
    Wasm32v1None,
    X86_64AppleIos,
    X86_64AppleIosMacabi,
    X86_64FortanixUnknownSgx,
    X86_64LinuxAndroid,
    X86_64PcSolaris,
    X86_64PcWindowsGnullvm,
    X86_64UnknownFuchsia,
    X86_64UnknownLinuxGnux32,
    X86_64UnknownLinuxOhos,
    X86_64UnknownNone,
    X86_64UnknownRedox,
    X86_64UnknownUefi,
}
impl Target {
    pub fn to_str(&self) -> &'static str {
        match self {
            Target::Aarch64AppleDarwin => "aarch64-apple-darwin",
            Target::Aarch64UnknownLinuxGnu => "aarch64-unknown-linux-gnu",
            Target::I686PcWindowsGnu => "i686-pc-windows-gnu",
            Target::I686PcWindowsMsvc => "i686-pc-windows-msvc",
            Target::I686UnknownLinuxGnu => "i686-unknown-linux-gnu",
            Target::X86_64AppleDarwin => "x86_64-apple-darwin",
            Target::X86_64PcWindowsGnu => "x86_64-pc-windows-gnu",
            Target::X86_64PcWindowsMsvc => "x86_64-pc-windows-msvc",
            Target::X86_64UnknownLinuxGnu => "x86_64-unknown-linux-gnu",
            Target::Aarch64PcWindowsMsvc => "aarch64-pc-windows-msvc",
            Target::Aarch64UnknownLinuxMusl => "aarch64-unknown-linux-musl",
            Target::ArmUnknownLinuxGnueabi => "arm-unknown-linux-gnueabi",
            Target::ArmUnknownLinuxGnueabihf => "arm-unknown-linux-gnueabihf",
            Target::Armv7UnknownLinuxGnueabihf => "armv7-unknown-linux-gnueabihf",
            Target::Loongarch64UnknownLinuxGnu => "loongarch64-unknown-linux-gnu",
            Target::Loongarch64UnknownLinuxMusl => "loongarch64-unknown-linux-musl",
            Target::PowerpcUnknownLinuxGnu => "powerpc-unknown-linux-gnu",
            Target::Powerpc64UnknownLinuxGnu => "powerpc64-unknown-linux-gnu",
            Target::Powerpc64leUnknownLinuxGnu => "powerpc64le-unknown-linux-gnu",
            Target::Powerpc64leUnknownLinuxMusl => "powerpc64le-unknown-linux-musl",
            Target::Riscv64gcUnknownLinuxGnu => "riscv64gc-unknown-linux-gnu",
            Target::Riscv64gcUnknownLinuxMusl => "riscv64gc-unknown-linux-musl",
            Target::S390xUnknownLinuxGnu => "s390x-unknown-linux-gnu",
            Target::X86_64UnknownFreebsd => "x86_64-unknown-freebsd",
            Target::X86_64UnknownIllumos => "x86_64-unknown-illumos",
            Target::X86_64UnknownLinuxMusl => "x86_64-unknown-linux-musl",
            Target::X86_64UnknownNetbsd => "x86_64-unknown-netbsd",
            Target::Aarch64AppleIos => "aarch64-apple-ios",
            Target::Aarch64AppleIosMacabi => "aarch64-apple-ios-macabi",
            Target::Aarch64AppleIosSim => "aarch64-apple-ios-sim",
            Target::Aarch64LinuxAndroid => "aarch64-linux-android",
            Target::Aarch64PcWindowsGnullvm => "aarch64-pc-windows-gnullvm",
            Target::Aarch64UnknownFuchsia => "aarch64-unknown-fuchsia",
            Target::Aarch64UnknownLinuxOhos => "aarch64-unknown-linux-ohos",
            Target::Aarch64UnknownNone => "aarch64-unknown-none",
            Target::Aarch64UnknownNoneSoftfloat => "aarch64-unknown-none-softfloat",
            Target::Aarch64UnknownUefi => "aarch64-unknown-uefi",
            Target::ArmLinuxAndroideabi => "arm-linux-androideabi",
            Target::ArmUnknownLinuxMusleabi => "arm-unknown-linux-musleabi",
            Target::ArmUnknownLinuxMusleabihf => "arm-unknown-linux-musleabihf",
            Target::Arm64ecPcWindowsMsvc => "arm64ec-pc-windows-msvc",
            Target::Armebv7rNoneEabi => "armebv7r-none-eabi",
            Target::Armebv7rNoneEabihf => "armebv7r-none-eabihf",
            Target::Armv5teUnknownLinuxGnueabi => "armv5te-unknown-linux-gnueabi",
            Target::Armv5teUnknownLinuxMusleabi => "armv5te-unknown-linux-musleabi",
            Target::Armv7LinuxAndroideabi => "armv7-linux-androideabi",
            Target::Armv7UnknownLinuxGnueabi => "armv7-unknown-linux-gnueabi",
            Target::Armv7UnknownLinuxMusleabi => "armv7-unknown-linux-musleabi",
            Target::Armv7UnknownLinuxMusleabihf => "armv7-unknown-linux-musleabihf",
            Target::Armv7UnknownLinuxOhos => "armv7-unknown-linux-ohos",
            Target::Armv7aNoneEabi => "armv7a-none-eabi",
            Target::Armv7rNoneEabi => "armv7r-none-eabi",
            Target::Armv7rNoneEabihf => "armv7r-none-eabihf",
            Target::I586PcWindowsMsvc => "i586-pc-windows-msvc",
            Target::I586UnknownLinuxGnu => "i586-unknown-linux-gnu",
            Target::I586UnknownLinuxMusl => "i586-unknown-linux-musl",
            Target::I686LinuxAndroid => "i686-linux-android",
            Target::I686PcWindowsGnullvm => "i686-pc-windows-gnullvm",
            Target::I686UnknownFreebsd => "i686-unknown-freebsd",
            Target::I686UnknownLinuxMusl => "i686-unknown-linux-musl",
            Target::I686UnknownUefi => "i686-unknown-uefi",
            Target::Loongarch64UnknownNone => "loongarch64-unknown-none",
            Target::Loongarch64UnknownNoneSoftfloat => "loongarch64-unknown-none-softfloat",
            Target::Nvptx64NvidiaCuda => "nvptx64-nvidia-cuda",
            Target::Riscv32iUnknownNoneElf => "riscv32i-unknown-none-elf",
            Target::Riscv32imUnknownNoneElf => "riscv32im-unknown-none-elf",
            Target::Riscv32imacUnknownNoneElf => "riscv32imac-unknown-none-elf",
            Target::Riscv32imafcUnknownNoneElf => "riscv32imafc-unknown-none-elf",
            Target::Riscv32imcUnknownNoneElf => "riscv32imc-unknown-none-elf",
            Target::Riscv64gcUnknownNoneElf => "riscv64gc-unknown-none-elf",
            Target::Riscv64imacUnknownNoneElf => "riscv64imac-unknown-none-elf",
            Target::Sparc64UnknownLinuxGnu => "sparc64-unknown-linux-gnu",
            Target::Sparcv9SunSolaris => "sparcv9-sun-solaris",
            Target::Thumbv6mNoneEabi => "thumbv6m-none-eabi",
            Target::Thumbv7emNoneEabi => "thumbv7em-none-eabi",
            Target::Thumbv7emNoneEabihf => "thumbv7em-none-eabihf",
            Target::Thumbv7mNoneEabi => "thumbv7m-none-eabi",
            Target::Thumbv7neonLinuxAndroideabi => "thumbv7neon-linux-androideabi",
            Target::Thumbv7neonUnknownLinuxGnueabihf => "thumbv7neon-unknown-linux-gnueabihf",
            Target::Thumbv8mBaseNoneEabi => "thumbv8m.base-none-eabi",
            Target::Thumbv8mMainNoneEabi => "thumbv8m.main-none-eabi",
            Target::Thumbv8mMainNoneEabihf => "thumbv8m.main-none-eabihf",
            Target::Wasm32UnknownEmscripten => "wasm32-unknown-emscripten",
            Target::Wasm32UnknownUnknown => "wasm32-unknown-unknown",
            Target::Wasm32Wasip1 => "wasm32-wasip1",
            Target::Wasm32Wasip1Threads => "wasm32-wasip1-threads",
            Target::Wasm32Wasip2 => "wasm32-wasip2",
            Target::Wasm32v1None => "wasm32v1-none",
            Target::X86_64AppleIos => "x86_64-apple-ios",
            Target::X86_64AppleIosMacabi => "x86_64-apple-ios-macabi",
            Target::X86_64FortanixUnknownSgx => "x86_64-fortanix-unknown-sgx",
            Target::X86_64LinuxAndroid => "x86_64-linux-android",
            Target::X86_64PcSolaris => "x86_64-pc-solaris",
            Target::X86_64PcWindowsGnullvm => "x86_64-pc-windows-gnullvm",
            Target::X86_64UnknownFuchsia => "x86_64-unknown-fuchsia",
            Target::X86_64UnknownLinuxGnux32 => "x86_64-unknown-linux-gnux32",
            Target::X86_64UnknownLinuxOhos => "x86_64-unknown-linux-ohos",
            Target::X86_64UnknownNone => "x86_64-unknown-none",
            Target::X86_64UnknownRedox => "x86_64-unknown-redox",
            Target::X86_64UnknownUefi => "x86_64-unknown-uefi",
        }
    }
}
impl std::fmt::Display for Target {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(self.to_str())
    }
}
impl std::str::FromStr for Target {
    type Err = &'static str;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "aarch64-apple-darwin" => Ok(Target::Aarch64AppleDarwin),
            "aarch64-unknown-linux-gnu" => Ok(Target::Aarch64UnknownLinuxGnu),
            "i686-pc-windows-gnu" => Ok(Target::I686PcWindowsGnu),
            "i686-pc-windows-msvc" => Ok(Target::I686PcWindowsMsvc),
            "i686-unknown-linux-gnu" => Ok(Target::I686UnknownLinuxGnu),
            "x86_64-apple-darwin" => Ok(Target::X86_64AppleDarwin),
            "x86_64-pc-windows-gnu" => Ok(Target::X86_64PcWindowsGnu),
            "x86_64-pc-windows-msvc" => Ok(Target::X86_64PcWindowsMsvc),
            "x86_64-unknown-linux-gnu" => Ok(Target::X86_64UnknownLinuxGnu),
            "aarch64-pc-windows-msvc" => Ok(Target::Aarch64PcWindowsMsvc),
            "aarch64-unknown-linux-musl" => Ok(Target::Aarch64UnknownLinuxMusl),
            "arm-unknown-linux-gnueabi" => Ok(Target::ArmUnknownLinuxGnueabi),
            "arm-unknown-linux-gnueabihf" => Ok(Target::ArmUnknownLinuxGnueabihf),
            "armv7-unknown-linux-gnueabihf" => Ok(Target::Armv7UnknownLinuxGnueabihf),
            "loongarch64-unknown-linux-gnu" => Ok(Target::Loongarch64UnknownLinuxGnu),
            "loongarch64-unknown-linux-musl" => Ok(Target::Loongarch64UnknownLinuxMusl),
            "powerpc-unknown-linux-gnu" => Ok(Target::PowerpcUnknownLinuxGnu),
            "powerpc64-unknown-linux-gnu" => Ok(Target::Powerpc64UnknownLinuxGnu),
            "powerpc64le-unknown-linux-gnu" => Ok(Target::Powerpc64leUnknownLinuxGnu),
            "powerpc64le-unknown-linux-musl" => Ok(Target::Powerpc64leUnknownLinuxMusl),
            "riscv64gc-unknown-linux-gnu" => Ok(Target::Riscv64gcUnknownLinuxGnu),
            "riscv64gc-unknown-linux-musl" => Ok(Target::Riscv64gcUnknownLinuxMusl),
            "s390x-unknown-linux-gnu" => Ok(Target::S390xUnknownLinuxGnu),
            "x86_64-unknown-freebsd" => Ok(Target::X86_64UnknownFreebsd),
            "x86_64-unknown-illumos" => Ok(Target::X86_64UnknownIllumos),
            "x86_64-unknown-linux-musl" => Ok(Target::X86_64UnknownLinuxMusl),
            "x86_64-unknown-netbsd" => Ok(Target::X86_64UnknownNetbsd),
            "aarch64-apple-ios" => Ok(Target::Aarch64AppleIos),
            "aarch64-apple-ios-macabi" => Ok(Target::Aarch64AppleIosMacabi),
            "aarch64-apple-ios-sim" => Ok(Target::Aarch64AppleIosSim),
            "aarch64-linux-android" => Ok(Target::Aarch64LinuxAndroid),
            "aarch64-pc-windows-gnullvm" => Ok(Target::Aarch64PcWindowsGnullvm),
            "aarch64-unknown-fuchsia" => Ok(Target::Aarch64UnknownFuchsia),
            "aarch64-unknown-linux-ohos" => Ok(Target::Aarch64UnknownLinuxOhos),
            "aarch64-unknown-none" => Ok(Target::Aarch64UnknownNone),
            "aarch64-unknown-none-softfloat" => Ok(Target::Aarch64UnknownNoneSoftfloat),
            "aarch64-unknown-uefi" => Ok(Target::Aarch64UnknownUefi),
            "arm-linux-androideabi" => Ok(Target::ArmLinuxAndroideabi),
            "arm-unknown-linux-musleabi" => Ok(Target::ArmUnknownLinuxMusleabi),
            "arm-unknown-linux-musleabihf" => Ok(Target::ArmUnknownLinuxMusleabihf),
            "arm64ec-pc-windows-msvc" => Ok(Target::Arm64ecPcWindowsMsvc),
            "armebv7r-none-eabi" => Ok(Target::Armebv7rNoneEabi),
            "armebv7r-none-eabihf" => Ok(Target::Armebv7rNoneEabihf),
            "armv5te-unknown-linux-gnueabi" => Ok(Target::Armv5teUnknownLinuxGnueabi),
            "armv5te-unknown-linux-musleabi" => Ok(Target::Armv5teUnknownLinuxMusleabi),
            "armv7-linux-androideabi" => Ok(Target::Armv7LinuxAndroideabi),
            "armv7-unknown-linux-gnueabi" => Ok(Target::Armv7UnknownLinuxGnueabi),
            "armv7-unknown-linux-musleabi" => Ok(Target::Armv7UnknownLinuxMusleabi),
            "armv7-unknown-linux-musleabihf" => Ok(Target::Armv7UnknownLinuxMusleabihf),
            "armv7-unknown-linux-ohos" => Ok(Target::Armv7UnknownLinuxOhos),
            "armv7a-none-eabi" => Ok(Target::Armv7aNoneEabi),
            "armv7r-none-eabi" => Ok(Target::Armv7rNoneEabi),
            "armv7r-none-eabihf" => Ok(Target::Armv7rNoneEabihf),
            "i586-pc-windows-msvc" => Ok(Target::I586PcWindowsMsvc),
            "i586-unknown-linux-gnu" => Ok(Target::I586UnknownLinuxGnu),
            "i586-unknown-linux-musl" => Ok(Target::I586UnknownLinuxMusl),
            "i686-linux-android" => Ok(Target::I686LinuxAndroid),
            "i686-pc-windows-gnullvm" => Ok(Target::I686PcWindowsGnullvm),
            "i686-unknown-freebsd" => Ok(Target::I686UnknownFreebsd),
            "i686-unknown-linux-musl" => Ok(Target::I686UnknownLinuxMusl),
            "i686-unknown-uefi" => Ok(Target::I686UnknownUefi),
            "loongarch64-unknown-none" => Ok(Target::Loongarch64UnknownNone),
            "loongarch64-unknown-none-softfloat" => Ok(Target::Loongarch64UnknownNoneSoftfloat),
            "nvptx64-nvidia-cuda" => Ok(Target::Nvptx64NvidiaCuda),
            "riscv32i-unknown-none-elf" => Ok(Target::Riscv32iUnknownNoneElf),
            "riscv32im-unknown-none-elf" => Ok(Target::Riscv32imUnknownNoneElf),
            "riscv32imac-unknown-none-elf" => Ok(Target::Riscv32imacUnknownNoneElf),
            "riscv32imafc-unknown-none-elf" => Ok(Target::Riscv32imafcUnknownNoneElf),
            "riscv32imc-unknown-none-elf" => Ok(Target::Riscv32imcUnknownNoneElf),
            "riscv64gc-unknown-none-elf" => Ok(Target::Riscv64gcUnknownNoneElf),
            "riscv64imac-unknown-none-elf" => Ok(Target::Riscv64imacUnknownNoneElf),
            "sparc64-unknown-linux-gnu" => Ok(Target::Sparc64UnknownLinuxGnu),
            "sparcv9-sun-solaris" => Ok(Target::Sparcv9SunSolaris),
            "thumbv6m-none-eabi" => Ok(Target::Thumbv6mNoneEabi),
            "thumbv7em-none-eabi" => Ok(Target::Thumbv7emNoneEabi),
            "thumbv7em-none-eabihf" => Ok(Target::Thumbv7emNoneEabihf),
            "thumbv7m-none-eabi" => Ok(Target::Thumbv7mNoneEabi),
            "thumbv7neon-linux-androideabi" => Ok(Target::Thumbv7neonLinuxAndroideabi),
            "thumbv7neon-unknown-linux-gnueabihf" => Ok(Target::Thumbv7neonUnknownLinuxGnueabihf),
            "thumbv8m.base-none-eabi" => Ok(Target::Thumbv8mBaseNoneEabi),
            "thumbv8m.main-none-eabi" => Ok(Target::Thumbv8mMainNoneEabi),
            "thumbv8m.main-none-eabihf" => Ok(Target::Thumbv8mMainNoneEabihf),
            "wasm32-unknown-emscripten" => Ok(Target::Wasm32UnknownEmscripten),
            "wasm32-unknown-unknown" => Ok(Target::Wasm32UnknownUnknown),
            "wasm32-wasip1" => Ok(Target::Wasm32Wasip1),
            "wasm32-wasip1-threads" => Ok(Target::Wasm32Wasip1Threads),
            "wasm32-wasip2" => Ok(Target::Wasm32Wasip2),
            "wasm32v1-none" => Ok(Target::Wasm32v1None),
            "x86_64-apple-ios" => Ok(Target::X86_64AppleIos),
            "x86_64-apple-ios-macabi" => Ok(Target::X86_64AppleIosMacabi),
            "x86_64-fortanix-unknown-sgx" => Ok(Target::X86_64FortanixUnknownSgx),
            "x86_64-linux-android" => Ok(Target::X86_64LinuxAndroid),
            "x86_64-pc-solaris" => Ok(Target::X86_64PcSolaris),
            "x86_64-pc-windows-gnullvm" => Ok(Target::X86_64PcWindowsGnullvm),
            "x86_64-unknown-fuchsia" => Ok(Target::X86_64UnknownFuchsia),
            "x86_64-unknown-linux-gnux32" => Ok(Target::X86_64UnknownLinuxGnux32),
            "x86_64-unknown-linux-ohos" => Ok(Target::X86_64UnknownLinuxOhos),
            "x86_64-unknown-none" => Ok(Target::X86_64UnknownNone),
            "x86_64-unknown-redox" => Ok(Target::X86_64UnknownRedox),
            "x86_64-unknown-uefi" => Ok(Target::X86_64UnknownUefi),
            _ => Err("Unknown Target"),
        }
    }
}
impl Target {
    pub fn arch(&self) -> Arch {
        match self {
            Target::Aarch64AppleDarwin => Arch::Aarch64,
            Target::Aarch64UnknownLinuxGnu => Arch::Aarch64,
            Target::I686PcWindowsGnu => Arch::I686,
            Target::I686PcWindowsMsvc => Arch::I686,
            Target::I686UnknownLinuxGnu => Arch::I686,
            Target::X86_64AppleDarwin => Arch::X86_64,
            Target::X86_64PcWindowsGnu => Arch::X86_64,
            Target::X86_64PcWindowsMsvc => Arch::X86_64,
            Target::X86_64UnknownLinuxGnu => Arch::X86_64,
            Target::Aarch64PcWindowsMsvc => Arch::Aarch64,
            Target::Aarch64UnknownLinuxMusl => Arch::Aarch64,
            Target::ArmUnknownLinuxGnueabi => Arch::Arm,
            Target::ArmUnknownLinuxGnueabihf => Arch::Arm,
            Target::Armv7UnknownLinuxGnueabihf => Arch::Armv7,
            Target::Loongarch64UnknownLinuxGnu => Arch::Loongarch64,
            Target::Loongarch64UnknownLinuxMusl => Arch::Loongarch64,
            Target::PowerpcUnknownLinuxGnu => Arch::Powerpc,
            Target::Powerpc64UnknownLinuxGnu => Arch::Powerpc64,
            Target::Powerpc64leUnknownLinuxGnu => Arch::Powerpc64le,
            Target::Powerpc64leUnknownLinuxMusl => Arch::Powerpc64le,
            Target::Riscv64gcUnknownLinuxGnu => Arch::Riscv64gc,
            Target::Riscv64gcUnknownLinuxMusl => Arch::Riscv64gc,
            Target::S390xUnknownLinuxGnu => Arch::S390x,
            Target::X86_64UnknownFreebsd => Arch::X86_64,
            Target::X86_64UnknownIllumos => Arch::X86_64,
            Target::X86_64UnknownLinuxMusl => Arch::X86_64,
            Target::X86_64UnknownNetbsd => Arch::X86_64,
            Target::Aarch64AppleIos => Arch::Aarch64,
            Target::Aarch64AppleIosMacabi => Arch::Aarch64,
            Target::Aarch64AppleIosSim => Arch::Aarch64,
            Target::Aarch64LinuxAndroid => Arch::Aarch64,
            Target::Aarch64PcWindowsGnullvm => Arch::Aarch64,
            Target::Aarch64UnknownFuchsia => Arch::Aarch64,
            Target::Aarch64UnknownLinuxOhos => Arch::Aarch64,
            Target::Aarch64UnknownNone => Arch::Aarch64,
            Target::Aarch64UnknownNoneSoftfloat => Arch::Aarch64,
            Target::Aarch64UnknownUefi => Arch::Aarch64,
            Target::ArmLinuxAndroideabi => Arch::Arm,
            Target::ArmUnknownLinuxMusleabi => Arch::Arm,
            Target::ArmUnknownLinuxMusleabihf => Arch::Arm,
            Target::Arm64ecPcWindowsMsvc => Arch::Arm64ec,
            Target::Armebv7rNoneEabi => Arch::Armebv7r,
            Target::Armebv7rNoneEabihf => Arch::Armebv7r,
            Target::Armv5teUnknownLinuxGnueabi => Arch::Armv5te,
            Target::Armv5teUnknownLinuxMusleabi => Arch::Armv5te,
            Target::Armv7LinuxAndroideabi => Arch::Armv7,
            Target::Armv7UnknownLinuxGnueabi => Arch::Armv7,
            Target::Armv7UnknownLinuxMusleabi => Arch::Armv7,
            Target::Armv7UnknownLinuxMusleabihf => Arch::Armv7,
            Target::Armv7UnknownLinuxOhos => Arch::Armv7,
            Target::Armv7aNoneEabi => Arch::Armv7a,
            Target::Armv7rNoneEabi => Arch::Armv7r,
            Target::Armv7rNoneEabihf => Arch::Armv7r,
            Target::I586PcWindowsMsvc => Arch::I586,
            Target::I586UnknownLinuxGnu => Arch::I586,
            Target::I586UnknownLinuxMusl => Arch::I586,
            Target::I686LinuxAndroid => Arch::I686,
            Target::I686PcWindowsGnullvm => Arch::I686,
            Target::I686UnknownFreebsd => Arch::I686,
            Target::I686UnknownLinuxMusl => Arch::I686,
            Target::I686UnknownUefi => Arch::I686,
            Target::Loongarch64UnknownNone => Arch::Loongarch64,
            Target::Loongarch64UnknownNoneSoftfloat => Arch::Loongarch64,
            Target::Nvptx64NvidiaCuda => Arch::Nvptx64,
            Target::Riscv32iUnknownNoneElf => Arch::Riscv32i,
            Target::Riscv32imUnknownNoneElf => Arch::Riscv32im,
            Target::Riscv32imacUnknownNoneElf => Arch::Riscv32imac,
            Target::Riscv32imafcUnknownNoneElf => Arch::Riscv32imafc,
            Target::Riscv32imcUnknownNoneElf => Arch::Riscv32imc,
            Target::Riscv64gcUnknownNoneElf => Arch::Riscv64gc,
            Target::Riscv64imacUnknownNoneElf => Arch::Riscv64imac,
            Target::Sparc64UnknownLinuxGnu => Arch::Sparc64,
            Target::Sparcv9SunSolaris => Arch::Sparcv9,
            Target::Thumbv6mNoneEabi => Arch::Thumbv6m,
            Target::Thumbv7emNoneEabi => Arch::Thumbv7em,
            Target::Thumbv7emNoneEabihf => Arch::Thumbv7em,
            Target::Thumbv7mNoneEabi => Arch::Thumbv7m,
            Target::Thumbv7neonLinuxAndroideabi => Arch::Thumbv7neon,
            Target::Thumbv7neonUnknownLinuxGnueabihf => Arch::Thumbv7neon,
            Target::Thumbv8mBaseNoneEabi => Arch::Thumbv8mBase,
            Target::Thumbv8mMainNoneEabi => Arch::Thumbv8mMain,
            Target::Thumbv8mMainNoneEabihf => Arch::Thumbv8mMain,
            Target::Wasm32UnknownEmscripten => Arch::Wasm32,
            Target::Wasm32UnknownUnknown => Arch::Wasm32,
            Target::Wasm32Wasip1 => Arch::Wasm32,
            Target::Wasm32Wasip1Threads => Arch::Wasm32,
            Target::Wasm32Wasip2 => Arch::Wasm32,
            Target::Wasm32v1None => Arch::Wasm32v1,
            Target::X86_64AppleIos => Arch::X86_64,
            Target::X86_64AppleIosMacabi => Arch::X86_64,
            Target::X86_64FortanixUnknownSgx => Arch::X86_64,
            Target::X86_64LinuxAndroid => Arch::X86_64,
            Target::X86_64PcSolaris => Arch::X86_64,
            Target::X86_64PcWindowsGnullvm => Arch::X86_64,
            Target::X86_64UnknownFuchsia => Arch::X86_64,
            Target::X86_64UnknownLinuxGnux32 => Arch::X86_64,
            Target::X86_64UnknownLinuxOhos => Arch::X86_64,
            Target::X86_64UnknownNone => Arch::X86_64,
            Target::X86_64UnknownRedox => Arch::X86_64,
            Target::X86_64UnknownUefi => Arch::X86_64,
        }
    }
    pub fn vender(&self) -> Vendor {
        match self {
            Target::Aarch64AppleDarwin => Vendor::Apple,
            Target::Aarch64UnknownLinuxGnu => Vendor::Unknown,
            Target::I686PcWindowsGnu => Vendor::Pc,
            Target::I686PcWindowsMsvc => Vendor::Pc,
            Target::I686UnknownLinuxGnu => Vendor::Unknown,
            Target::X86_64AppleDarwin => Vendor::Apple,
            Target::X86_64PcWindowsGnu => Vendor::Pc,
            Target::X86_64PcWindowsMsvc => Vendor::Pc,
            Target::X86_64UnknownLinuxGnu => Vendor::Unknown,
            Target::Aarch64PcWindowsMsvc => Vendor::Pc,
            Target::Aarch64UnknownLinuxMusl => Vendor::Unknown,
            Target::ArmUnknownLinuxGnueabi => Vendor::Unknown,
            Target::ArmUnknownLinuxGnueabihf => Vendor::Unknown,
            Target::Armv7UnknownLinuxGnueabihf => Vendor::Unknown,
            Target::Loongarch64UnknownLinuxGnu => Vendor::Unknown,
            Target::Loongarch64UnknownLinuxMusl => Vendor::Unknown,
            Target::PowerpcUnknownLinuxGnu => Vendor::Unknown,
            Target::Powerpc64UnknownLinuxGnu => Vendor::Unknown,
            Target::Powerpc64leUnknownLinuxGnu => Vendor::Unknown,
            Target::Powerpc64leUnknownLinuxMusl => Vendor::Unknown,
            Target::Riscv64gcUnknownLinuxGnu => Vendor::Unknown,
            Target::Riscv64gcUnknownLinuxMusl => Vendor::Unknown,
            Target::S390xUnknownLinuxGnu => Vendor::Unknown,
            Target::X86_64UnknownFreebsd => Vendor::Unknown,
            Target::X86_64UnknownIllumos => Vendor::Unknown,
            Target::X86_64UnknownLinuxMusl => Vendor::Unknown,
            Target::X86_64UnknownNetbsd => Vendor::Unknown,
            Target::Aarch64AppleIos => Vendor::Apple,
            Target::Aarch64AppleIosMacabi => Vendor::Apple,
            Target::Aarch64AppleIosSim => Vendor::Apple,
            Target::Aarch64LinuxAndroid => Vendor::Linux,
            Target::Aarch64PcWindowsGnullvm => Vendor::Pc,
            Target::Aarch64UnknownFuchsia => Vendor::Unknown,
            Target::Aarch64UnknownLinuxOhos => Vendor::Unknown,
            Target::Aarch64UnknownNone => Vendor::Unknown,
            Target::Aarch64UnknownNoneSoftfloat => Vendor::Unknown,
            Target::Aarch64UnknownUefi => Vendor::Unknown,
            Target::ArmLinuxAndroideabi => Vendor::Linux,
            Target::ArmUnknownLinuxMusleabi => Vendor::Unknown,
            Target::ArmUnknownLinuxMusleabihf => Vendor::Unknown,
            Target::Arm64ecPcWindowsMsvc => Vendor::Pc,
            Target::Armebv7rNoneEabi => Vendor::None,
            Target::Armebv7rNoneEabihf => Vendor::None,
            Target::Armv5teUnknownLinuxGnueabi => Vendor::Unknown,
            Target::Armv5teUnknownLinuxMusleabi => Vendor::Unknown,
            Target::Armv7LinuxAndroideabi => Vendor::Linux,
            Target::Armv7UnknownLinuxGnueabi => Vendor::Unknown,
            Target::Armv7UnknownLinuxMusleabi => Vendor::Unknown,
            Target::Armv7UnknownLinuxMusleabihf => Vendor::Unknown,
            Target::Armv7UnknownLinuxOhos => Vendor::Unknown,
            Target::Armv7aNoneEabi => Vendor::None,
            Target::Armv7rNoneEabi => Vendor::None,
            Target::Armv7rNoneEabihf => Vendor::None,
            Target::I586PcWindowsMsvc => Vendor::Pc,
            Target::I586UnknownLinuxGnu => Vendor::Unknown,
            Target::I586UnknownLinuxMusl => Vendor::Unknown,
            Target::I686LinuxAndroid => Vendor::Linux,
            Target::I686PcWindowsGnullvm => Vendor::Pc,
            Target::I686UnknownFreebsd => Vendor::Unknown,
            Target::I686UnknownLinuxMusl => Vendor::Unknown,
            Target::I686UnknownUefi => Vendor::Unknown,
            Target::Loongarch64UnknownNone => Vendor::Unknown,
            Target::Loongarch64UnknownNoneSoftfloat => Vendor::Unknown,
            Target::Nvptx64NvidiaCuda => Vendor::Nvidia,
            Target::Riscv32iUnknownNoneElf => Vendor::Unknown,
            Target::Riscv32imUnknownNoneElf => Vendor::Unknown,
            Target::Riscv32imacUnknownNoneElf => Vendor::Unknown,
            Target::Riscv32imafcUnknownNoneElf => Vendor::Unknown,
            Target::Riscv32imcUnknownNoneElf => Vendor::Unknown,
            Target::Riscv64gcUnknownNoneElf => Vendor::Unknown,
            Target::Riscv64imacUnknownNoneElf => Vendor::Unknown,
            Target::Sparc64UnknownLinuxGnu => Vendor::Unknown,
            Target::Sparcv9SunSolaris => Vendor::Sun,
            Target::Thumbv6mNoneEabi => Vendor::None,
            Target::Thumbv7emNoneEabi => Vendor::None,
            Target::Thumbv7emNoneEabihf => Vendor::None,
            Target::Thumbv7mNoneEabi => Vendor::None,
            Target::Thumbv7neonLinuxAndroideabi => Vendor::Linux,
            Target::Thumbv7neonUnknownLinuxGnueabihf => Vendor::Unknown,
            Target::Thumbv8mBaseNoneEabi => Vendor::None,
            Target::Thumbv8mMainNoneEabi => Vendor::None,
            Target::Thumbv8mMainNoneEabihf => Vendor::None,
            Target::Wasm32UnknownEmscripten => Vendor::Unknown,
            Target::Wasm32UnknownUnknown => Vendor::Unknown,
            Target::Wasm32Wasip1 => Vendor::Wasip1,
            Target::Wasm32Wasip1Threads => Vendor::Wasip1,
            Target::Wasm32Wasip2 => Vendor::Wasip2,
            Target::Wasm32v1None => Vendor::None,
            Target::X86_64AppleIos => Vendor::Apple,
            Target::X86_64AppleIosMacabi => Vendor::Apple,
            Target::X86_64FortanixUnknownSgx => Vendor::Fortanix,
            Target::X86_64LinuxAndroid => Vendor::Linux,
            Target::X86_64PcSolaris => Vendor::Pc,
            Target::X86_64PcWindowsGnullvm => Vendor::Pc,
            Target::X86_64UnknownFuchsia => Vendor::Unknown,
            Target::X86_64UnknownLinuxGnux32 => Vendor::Unknown,
            Target::X86_64UnknownLinuxOhos => Vendor::Unknown,
            Target::X86_64UnknownNone => Vendor::Unknown,
            Target::X86_64UnknownRedox => Vendor::Unknown,
            Target::X86_64UnknownUefi => Vendor::Unknown,
        }
    }
    pub fn os(&self) -> Os {
        match self {
            Target::Aarch64AppleDarwin => Os::Darwin,
            Target::Aarch64UnknownLinuxGnu => Os::Linux,
            Target::I686PcWindowsGnu => Os::Windows,
            Target::I686PcWindowsMsvc => Os::Windows,
            Target::I686UnknownLinuxGnu => Os::Linux,
            Target::X86_64AppleDarwin => Os::Darwin,
            Target::X86_64PcWindowsGnu => Os::Windows,
            Target::X86_64PcWindowsMsvc => Os::Windows,
            Target::X86_64UnknownLinuxGnu => Os::Linux,
            Target::Aarch64PcWindowsMsvc => Os::Windows,
            Target::Aarch64UnknownLinuxMusl => Os::Linux,
            Target::ArmUnknownLinuxGnueabi => Os::Linux,
            Target::ArmUnknownLinuxGnueabihf => Os::Linux,
            Target::Armv7UnknownLinuxGnueabihf => Os::Linux,
            Target::Loongarch64UnknownLinuxGnu => Os::Linux,
            Target::Loongarch64UnknownLinuxMusl => Os::Linux,
            Target::PowerpcUnknownLinuxGnu => Os::Linux,
            Target::Powerpc64UnknownLinuxGnu => Os::Linux,
            Target::Powerpc64leUnknownLinuxGnu => Os::Linux,
            Target::Powerpc64leUnknownLinuxMusl => Os::Linux,
            Target::Riscv64gcUnknownLinuxGnu => Os::Linux,
            Target::Riscv64gcUnknownLinuxMusl => Os::Linux,
            Target::S390xUnknownLinuxGnu => Os::Linux,
            Target::X86_64UnknownFreebsd => Os::Freebsd,
            Target::X86_64UnknownIllumos => Os::Illumos,
            Target::X86_64UnknownLinuxMusl => Os::Linux,
            Target::X86_64UnknownNetbsd => Os::Netbsd,
            Target::Aarch64AppleIos => Os::Ios,
            Target::Aarch64AppleIosMacabi => Os::Ios,
            Target::Aarch64AppleIosSim => Os::Ios,
            Target::Aarch64LinuxAndroid => Os::Android,
            Target::Aarch64PcWindowsGnullvm => Os::Windows,
            Target::Aarch64UnknownFuchsia => Os::Fuchsia,
            Target::Aarch64UnknownLinuxOhos => Os::Linux,
            Target::Aarch64UnknownNone => Os::None,
            Target::Aarch64UnknownNoneSoftfloat => Os::None,
            Target::Aarch64UnknownUefi => Os::Uefi,
            Target::ArmLinuxAndroideabi => Os::Androideabi,
            Target::ArmUnknownLinuxMusleabi => Os::Linux,
            Target::ArmUnknownLinuxMusleabihf => Os::Linux,
            Target::Arm64ecPcWindowsMsvc => Os::Windows,
            Target::Armebv7rNoneEabi => Os::Eabi,
            Target::Armebv7rNoneEabihf => Os::Eabihf,
            Target::Armv5teUnknownLinuxGnueabi => Os::Linux,
            Target::Armv5teUnknownLinuxMusleabi => Os::Linux,
            Target::Armv7LinuxAndroideabi => Os::Androideabi,
            Target::Armv7UnknownLinuxGnueabi => Os::Linux,
            Target::Armv7UnknownLinuxMusleabi => Os::Linux,
            Target::Armv7UnknownLinuxMusleabihf => Os::Linux,
            Target::Armv7UnknownLinuxOhos => Os::Linux,
            Target::Armv7aNoneEabi => Os::Eabi,
            Target::Armv7rNoneEabi => Os::Eabi,
            Target::Armv7rNoneEabihf => Os::Eabihf,
            Target::I586PcWindowsMsvc => Os::Windows,
            Target::I586UnknownLinuxGnu => Os::Linux,
            Target::I586UnknownLinuxMusl => Os::Linux,
            Target::I686LinuxAndroid => Os::Android,
            Target::I686PcWindowsGnullvm => Os::Windows,
            Target::I686UnknownFreebsd => Os::Freebsd,
            Target::I686UnknownLinuxMusl => Os::Linux,
            Target::I686UnknownUefi => Os::Uefi,
            Target::Loongarch64UnknownNone => Os::None,
            Target::Loongarch64UnknownNoneSoftfloat => Os::None,
            Target::Nvptx64NvidiaCuda => Os::Cuda,
            Target::Riscv32iUnknownNoneElf => Os::None,
            Target::Riscv32imUnknownNoneElf => Os::None,
            Target::Riscv32imacUnknownNoneElf => Os::None,
            Target::Riscv32imafcUnknownNoneElf => Os::None,
            Target::Riscv32imcUnknownNoneElf => Os::None,
            Target::Riscv64gcUnknownNoneElf => Os::None,
            Target::Riscv64imacUnknownNoneElf => Os::None,
            Target::Sparc64UnknownLinuxGnu => Os::Linux,
            Target::Sparcv9SunSolaris => Os::Solaris,
            Target::Thumbv6mNoneEabi => Os::Eabi,
            Target::Thumbv7emNoneEabi => Os::Eabi,
            Target::Thumbv7emNoneEabihf => Os::Eabihf,
            Target::Thumbv7mNoneEabi => Os::Eabi,
            Target::Thumbv7neonLinuxAndroideabi => Os::Androideabi,
            Target::Thumbv7neonUnknownLinuxGnueabihf => Os::Linux,
            Target::Thumbv8mBaseNoneEabi => Os::Eabi,
            Target::Thumbv8mMainNoneEabi => Os::Eabi,
            Target::Thumbv8mMainNoneEabihf => Os::Eabihf,
            Target::Wasm32UnknownEmscripten => Os::Emscripten,
            Target::Wasm32UnknownUnknown => Os::Unknown,
            Target::Wasm32Wasip1 => Os::Wasip1,
            Target::Wasm32Wasip1Threads => Os::Threads,
            Target::Wasm32Wasip2 => Os::Wasip2,
            Target::Wasm32v1None => Os::None,
            Target::X86_64AppleIos => Os::Ios,
            Target::X86_64AppleIosMacabi => Os::Ios,
            Target::X86_64FortanixUnknownSgx => Os::Unknown,
            Target::X86_64LinuxAndroid => Os::Android,
            Target::X86_64PcSolaris => Os::Solaris,
            Target::X86_64PcWindowsGnullvm => Os::Windows,
            Target::X86_64UnknownFuchsia => Os::Fuchsia,
            Target::X86_64UnknownLinuxGnux32 => Os::Linux,
            Target::X86_64UnknownLinuxOhos => Os::Linux,
            Target::X86_64UnknownNone => Os::None,
            Target::X86_64UnknownRedox => Os::Redox,
            Target::X86_64UnknownUefi => Os::Uefi,
        }
    }
    pub fn abi(&self) -> Option<Abi> {
        match self {
            Target::Aarch64AppleDarwin => None,
            Target::Aarch64UnknownLinuxGnu => Some(Abi::Gnu),
            Target::I686PcWindowsGnu => Some(Abi::Gnu),
            Target::I686PcWindowsMsvc => Some(Abi::Msvc),
            Target::I686UnknownLinuxGnu => Some(Abi::Gnu),
            Target::X86_64AppleDarwin => None,
            Target::X86_64PcWindowsGnu => Some(Abi::Gnu),
            Target::X86_64PcWindowsMsvc => Some(Abi::Msvc),
            Target::X86_64UnknownLinuxGnu => Some(Abi::Gnu),
            Target::Aarch64PcWindowsMsvc => Some(Abi::Msvc),
            Target::Aarch64UnknownLinuxMusl => Some(Abi::Musl),
            Target::ArmUnknownLinuxGnueabi => Some(Abi::Gnueabi),
            Target::ArmUnknownLinuxGnueabihf => Some(Abi::Gnueabihf),
            Target::Armv7UnknownLinuxGnueabihf => Some(Abi::Gnueabihf),
            Target::Loongarch64UnknownLinuxGnu => Some(Abi::Gnu),
            Target::Loongarch64UnknownLinuxMusl => Some(Abi::Musl),
            Target::PowerpcUnknownLinuxGnu => Some(Abi::Gnu),
            Target::Powerpc64UnknownLinuxGnu => Some(Abi::Gnu),
            Target::Powerpc64leUnknownLinuxGnu => Some(Abi::Gnu),
            Target::Powerpc64leUnknownLinuxMusl => Some(Abi::Musl),
            Target::Riscv64gcUnknownLinuxGnu => Some(Abi::Gnu),
            Target::Riscv64gcUnknownLinuxMusl => Some(Abi::Musl),
            Target::S390xUnknownLinuxGnu => Some(Abi::Gnu),
            Target::X86_64UnknownFreebsd => None,
            Target::X86_64UnknownIllumos => None,
            Target::X86_64UnknownLinuxMusl => Some(Abi::Musl),
            Target::X86_64UnknownNetbsd => None,
            Target::Aarch64AppleIos => None,
            Target::Aarch64AppleIosMacabi => Some(Abi::Macabi),
            Target::Aarch64AppleIosSim => Some(Abi::Sim),
            Target::Aarch64LinuxAndroid => None,
            Target::Aarch64PcWindowsGnullvm => Some(Abi::Gnullvm),
            Target::Aarch64UnknownFuchsia => None,
            Target::Aarch64UnknownLinuxOhos => Some(Abi::Ohos),
            Target::Aarch64UnknownNone => None,
            Target::Aarch64UnknownNoneSoftfloat => Some(Abi::Softfloat),
            Target::Aarch64UnknownUefi => None,
            Target::ArmLinuxAndroideabi => None,
            Target::ArmUnknownLinuxMusleabi => Some(Abi::Musleabi),
            Target::ArmUnknownLinuxMusleabihf => Some(Abi::Musleabihf),
            Target::Arm64ecPcWindowsMsvc => Some(Abi::Msvc),
            Target::Armebv7rNoneEabi => None,
            Target::Armebv7rNoneEabihf => None,
            Target::Armv5teUnknownLinuxGnueabi => Some(Abi::Gnueabi),
            Target::Armv5teUnknownLinuxMusleabi => Some(Abi::Musleabi),
            Target::Armv7LinuxAndroideabi => None,
            Target::Armv7UnknownLinuxGnueabi => Some(Abi::Gnueabi),
            Target::Armv7UnknownLinuxMusleabi => Some(Abi::Musleabi),
            Target::Armv7UnknownLinuxMusleabihf => Some(Abi::Musleabihf),
            Target::Armv7UnknownLinuxOhos => Some(Abi::Ohos),
            Target::Armv7aNoneEabi => None,
            Target::Armv7rNoneEabi => None,
            Target::Armv7rNoneEabihf => None,
            Target::I586PcWindowsMsvc => Some(Abi::Msvc),
            Target::I586UnknownLinuxGnu => Some(Abi::Gnu),
            Target::I586UnknownLinuxMusl => Some(Abi::Musl),
            Target::I686LinuxAndroid => None,
            Target::I686PcWindowsGnullvm => Some(Abi::Gnullvm),
            Target::I686UnknownFreebsd => None,
            Target::I686UnknownLinuxMusl => Some(Abi::Musl),
            Target::I686UnknownUefi => None,
            Target::Loongarch64UnknownNone => None,
            Target::Loongarch64UnknownNoneSoftfloat => Some(Abi::Softfloat),
            Target::Nvptx64NvidiaCuda => None,
            Target::Riscv32iUnknownNoneElf => Some(Abi::Elf),
            Target::Riscv32imUnknownNoneElf => Some(Abi::Elf),
            Target::Riscv32imacUnknownNoneElf => Some(Abi::Elf),
            Target::Riscv32imafcUnknownNoneElf => Some(Abi::Elf),
            Target::Riscv32imcUnknownNoneElf => Some(Abi::Elf),
            Target::Riscv64gcUnknownNoneElf => Some(Abi::Elf),
            Target::Riscv64imacUnknownNoneElf => Some(Abi::Elf),
            Target::Sparc64UnknownLinuxGnu => Some(Abi::Gnu),
            Target::Sparcv9SunSolaris => None,
            Target::Thumbv6mNoneEabi => None,
            Target::Thumbv7emNoneEabi => None,
            Target::Thumbv7emNoneEabihf => None,
            Target::Thumbv7mNoneEabi => None,
            Target::Thumbv7neonLinuxAndroideabi => None,
            Target::Thumbv7neonUnknownLinuxGnueabihf => Some(Abi::Gnueabihf),
            Target::Thumbv8mBaseNoneEabi => None,
            Target::Thumbv8mMainNoneEabi => None,
            Target::Thumbv8mMainNoneEabihf => None,
            Target::Wasm32UnknownEmscripten => None,
            Target::Wasm32UnknownUnknown => None,
            Target::Wasm32Wasip1 => None,
            Target::Wasm32Wasip1Threads => None,
            Target::Wasm32Wasip2 => None,
            Target::Wasm32v1None => None,
            Target::X86_64AppleIos => None,
            Target::X86_64AppleIosMacabi => Some(Abi::Macabi),
            Target::X86_64FortanixUnknownSgx => Some(Abi::Sgx),
            Target::X86_64LinuxAndroid => None,
            Target::X86_64PcSolaris => None,
            Target::X86_64PcWindowsGnullvm => Some(Abi::Gnullvm),
            Target::X86_64UnknownFuchsia => None,
            Target::X86_64UnknownLinuxGnux32 => Some(Abi::Gnux32),
            Target::X86_64UnknownLinuxOhos => Some(Abi::Ohos),
            Target::X86_64UnknownNone => None,
            Target::X86_64UnknownRedox => None,
            Target::X86_64UnknownUefi => None,
        }
    }
}
